CONTROLLER:
// Mailer configuration
const transporter = nodemailer.createTransport({
  service: "Gmail",
  auth: {
    user: process.env.EMAIL_TEST,
    pass: process.env.EMAIL_PWD,
  },
});


exports.getForgotPassword = (req, res) => {
  res.render("auth/forgot-password", { path: "/forgot-password" });
};

exports.postForgotPassword = async (req, res) => {
  try {
    const buffer = crypto.randomBytes(20);
    const token = buffer.toString("hex");

    let user = await User.findOne({ email: req.body.email });
    if (!user) {
      return res.status(404).send("No account with that email found.");
    }

    user.resetPasswordToken = token;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 hour
    await user.save();

    const resetUrl = `http://${req.headers.host}/reset-password/${token}`;
    const mailOptions = {
      to: user.email,
      from: process.env.EMAIL_USERNAME,
      subject: "Password Reset",
      text: `You are receiving this because you (or someone else) have requested the reset of the password for your account.\n\n
        Please click on the following link, or paste this into your browser to complete the process:\n\n
        ${resetUrl}\n\n
        If you did not request this, please ignore this email and your password will remain unchanged.\n`,
    };

    await transporter.sendMail(mailOptions);
    res.send(
      "An e-mail has been sent to " + user.email + " with further instructions."
    );
  } catch (error) {
    res
      .status(500)
      .send("Error sending the password reset email. Try again later.");
  }
};

exports.getResetPassword = async (req, res) => {
  const user = await User.findOne({
    resetPasswordToken: req.params.token,
    resetPasswordExpires: { $gt: Date.now() },
  });
  if (!user) {
    return res
      .status(404)
      .send("Password reset token is invalid or has expired.");
  }
  res.render("auth/reset-password", {
    token: req.params.token,
    path: "/reset-password",
  });
};

exports.postResetPassword = async (req, res) => {
  try {
    const user = await User.findOne({
      resetPasswordToken: req.params.token,
      resetPasswordExpires: { $gt: Date.now() },
    });
    if (!user) {
      return res
        .status(404)
        .send("Password reset token is invalid or has expired.");
    }

    if (!req.body.password) {
      return res.status(400).send("Password is required.");
    }

    const hashedPassword = await bcrypt.hash(req.body.password, 10);
    user.password = hashedPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.send("Your password has been updated.");
  } catch (error) {
    res.status(500).send("Internal server error");
  }
};




ROUTES:

router.get("/forgot-password", authController.getForgotPassword);
router.post("/forgot-password", authController.postForgotPassword);
router.get("/reset-password/:token", authController.getResetPassword);
router.post("/reset-password/:token", authController.postResetPassword);




EJS:

forgot-password.ejs:

<%- include('../includes/head.ejs') %>
<body>
    <%- include('../includes/navigation.ejs') %>
    <h1>Forgot Password</h1>
    <form action="/forgot-password" method="post">
        <input type="email" name="email" placeholder="Enter your email" required>
        <button type="submit">Send Reset Link</button>
    </form>
<%- include('../includes/end.ejs') %>




reset-password.ejs:


<%- include('../includes/head.ejs') %>
<body>
    <%- include('../includes/navigation.ejs') %>
    <h1>Reset Password</h1>
    <form action="/reset-password/<%= token %>" method="post">
        <input type="password" name="password" placeholder="New password" required>
        <button type="submit">Update Password</button>
    </form>
<%- include('../includes/end.ejs') %>