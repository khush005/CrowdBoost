khushboomakhija053

3zXenB8dMtihfOwH


GET REQUEST -----> render
POST REQUEST    -----> redirect

/*
async function getUserData(userId) {
  const result = await User.aggregate([
    {
      $match: {
        _id: new mongoose.Types.ObjectId(userId),
      },
    },
    {
      $lookup: {
        from: "donations",
        localField: "_id",
        foreignField: "user_id",
        as: "donations",
      },
    },
    {
      $unwind: {
        path: "$donations",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $lookup: {
        from: "projects",
        localField: "donations.project_id",
        foreignField: "_id",
        as: "projects",
      },
    },
    {
      $unwind: {
        path: "$projects",
        preserveNullAndEmptyArrays: true
      }
    },
    {
      $group: {
        _id: "$_id",
        firstName: { $first: "$firstName" },
        lastName: { $first: "$lastName" },
        pageName: { $first: "$pageName" },
        category: { $first: "$category" },
        projects: { $addToSet: "$projects" },
        donations: { $push: "$donations" }
      },
    },
    {
      $project: {
        firstName: 1,
        lastName: 1,
        pageName: 1,
        category: 1,
        projects: 1,
        donations: 1
      },
    },
    // {
    //   $project: {
    //     firstName: 1,
    //     lastName: 1,
    //     pageName: 1,
    //     category: 1,
    //     projects: 1,
    //     project_donations: {
    //       $filter: {
    //         input: "$project_donations",
    //         as: "donation",
    //         cond: { $eq: ["$$donation.user_id", new mongoose.Types.ObjectId(userId)] }
    //       }
    //     }

    //   }
    // }
  ]);
  return result[0];
}
*/





<%- include('../includes/head.ejs') %>
<link rel="stylesheet" href="css/table.css">
<body>
    <%- include('../includes/userNavbar.ejs') %>
    <h1>User Data</h1>

    <% if (user) { %>
        <h2>User Information:</h2>
        <p>First Name: <%= user.firstName %></p>
        <p>Last Name: <%= user.lastName %></p>
        <p>Page Name: <%= user.pageName %></p>
        <p>Category: <%= user.category %></p>

        <h2>User Projects:</h2>
        <% if (user.projects && user.projects.length > 0) { %>
            <div class="container">
                <ul class="responsive-table">
                    <li class="table-header">
                        <div class="col col-1">Project Title</div>
                        <div class="col col-2">Description</div>
                        <div class="col col-3">Target Amount</div>
                        <div class="col col-4">Raised Amount</div>
                    </li>
                    <% user.projects.forEach(project => { %>
                        <li class="table-row">
                            <div class="col col-1" ><%= project.title %></div>
                            <div class="col col-2" ><%= project.description %></div>
                            <div class="col col-3" ><%= project.target_amount %></div>
                            <div class="col col-4"><%= project.current_amount %></div>
                        </li>
                    <% }); %>
                </ul>
            </div>
        <% } else { %>
            <p>No projects found for this user.</p>
        <% } %>

        <h2>User Donations:</h2>
        <% if (user.donations && user.donations.length > 0) { %>
            <div class="container">
                <ul class="responsive-table">
                    <li class="table-header">
                        <div class="col col-1">Donation Amount</div>
                        <div class="col col-2">Project Title</div>
                        <div class="col col-3">Date of Donation</div>
                    </li>
                    <% user.donations.forEach(donation => { %>
                        <li class="table-row">
                            <div class="col col-1">$<%= donation.amount %></div>
                            <div class="col col-2"><%= donation.project_id %></div> <!-- Ensure the project_id object is populated with title -->
                            <div class="col col-3"><%= new Date(donation.donated_at).toLocaleDateString() %></div>
                        </li>
                    <% }); %>
                </ul>
            </div>
        <% } else { %>
            <p>No donations found for this user.</p>
        <% } %>

    <% } else { %>
        <p>User data not available</p>
    <% } %>

    <%- include('../includes/end.ejs') %>
</body>


exports.getUserData = async (req, res) => {
  try {
    const userId = req.user._id;
    const userData = await getUserData(userId);
    if (!userData) {
      return res.status(404).send("User not found")
    }
    res.render('user/getUserData', { 
      user: userData,
      path: "/getUserData"
  });

    // res.json(data)
  } catch (e) {
    res.status(500).send(e)
    console.log(e)
  }
}

















GMAIL NODEMAILER
const crypto = require('crypto');
const nodemailer = require('nodemailer');

app.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).send('No account with that email address exists.');
    }

    const token = crypto.randomBytes(20).toString('hex');
    user.resetPasswordToken = token;
    user.resetPasswordExpires = Date.now() + 3600000; // 1 hour

    await user.save();

    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_HOST,
      port: process.env.EMAIL_PORT,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    const mailOptions = {
      to: user.email,
      from: 'passwordreset@example.com',
      subject: 'Password Reset',
      text: `You are receiving this because you (or someone else) have requested the reset of the password for your account.\n\n` +
            `Please click on the following link, or paste this into your browser to complete the process:\n\n` +
            `http://${req.headers.host}/reset-password/${token}\n\n` +
            `If you did not request this, please ignore this email and your password will remain unchanged.\n`
    };

    await transporter.sendMail(mailOptions);
    res.send('An e-mail has been sent to ' + user.email + ' with further instructions.');
  } catch (error) {
    res.status(500).send('Error sending the email. Try again later.');
    console.error('forgot-password error:', error);
  }
});
